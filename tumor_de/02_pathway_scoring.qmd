---
title: "Squamous Tumor Pathway Analysis"
author: "Matthew Zatzman"
date: "`r Sys.Date()`"
format: 
  html:
    code-fold: true
    code-tools: true
    code-link: true
    toc: true
---

# Introduction


```{r setup}
#| output: false
library(tidyverse)
library(ggthemes)
library(ggsci)
library(dittoSeq)
library(patchwork)
library(Matrix)
library(glue)
library(ggplotify)
library(ggh4x)
library(patchwork)
library(anndata)
library(SingleCellExperiment)
library(ggbeeswarm)
library(Seurat)
library(here)
library(msigdbr)
library(harmony)
library(UCell)
library(readxl)

theme_set(theme_classic())
```

## Load Data

```{r}
srt_epi <- readRDS("results/epithelial_object.rds")

tum_calls <- read.table(file = "results/tumor_cell_calls.txt", header = T, sep = "\t")
rownames(tum_calls) <- tum_calls$cell_id

srt_epi <- AddMetaData(srt_epi, tum_calls)
```


### Recreate Seurat Object

Port back in raw counts and reprocess from scratch

```{r}
adata <- read_h5ad("/work/shah/users/Mobina/Projects/Project_Squamous/Squamousdata/adata_Full_genevector_from_top_with_subpops_with_cancer.h5ad")

raw_counts <- adata$raw$to_adata()$X %>%
  as(., "CsparseMatrix") %>%
  t()

rownames(raw_counts) <- adata$raw$to_adata()$var$features

all(colnames(srt_epi) %in% colnames(raw_counts))

counts <- raw_counts[,colnames(srt_epi)]


srt <- CreateSeuratObject(counts = counts, meta.data = srt_epi@meta.data)
```

## Reprocess

### Harmony

```{r, fig.width=10, fig.height=4}
srt[["RNA"]] <- split(srt[["RNA"]], f = srt$sample_name)
srt <- NormalizeData(srt)
srt <- FindVariableFeatures(srt)
srt <- ScaleData(srt)
srt <- RunPCA(srt)

srt <- IntegrateLayers(
  object = srt, method = HarmonyIntegration,
  orig.reduction = "pca", new.reduction = "harmony",
  verbose = T
)

srt <- FindNeighbors(srt, reduction = "harmony", dims = 1:30)
srt <- FindClusters(srt, resolution = 0.8, cluster.name = "clusters_harmony")
srt <- RunUMAP(srt, reduction = "harmony", dims = 1:30, reduction.name = "umap.harmony")

srt <- JoinLayers(srt)
```


```{r}
srt <- CellCycleScoring(srt, s.features = cc.genes.updated.2019$s.genes, g2m.features = cc.genes.updated.2019$g2m.genes, set.ident = F)
```


```{r, fig.width=10, fig.height=8}
DimPlot(srt, reduction = "umap.harmony", group.by = c("sample_name", "is_tumor_cell", "clusters_harmony"), ncol = 2, label = T)
```
```{r, fig.width=5, fig.height=4}
DimPlot(srt, reduction = "umap.harmony", group.by = c("Phase"), ncol = 1, label = F)
```


```{r, fig.width=10, fig.height=4}
FeaturePlot(srt, features = c("S.Score", "G2M.Score"), min.cutoff = 0, max.cutoff = "q95", label = T)
```

```{r, fig.width=10, fig.height=4}
srt[["percent_mito"]] <-
  PercentageFeatureSet(srt, pattern = "^MT-")

# Calculate ribosomal content
srt[["percent_ribo"]] <-
  PercentageFeatureSet(srt, pattern = "^RPS|^RPL")
FeaturePlot(srt, features = c("percent_mito", "percent_ribo"), label = F, max.cutoff = "q99")
```

Proportion of tumor cells and patient per cluster

```{r}
p1 <- srt@meta.data %>%
  ggplot(aes(x = clusters_harmony)) +
  geom_bar(aes(fill = is_tumor_cell), position = "fill")
p2 <- srt@meta.data %>%
  ggplot(aes(x = clusters_harmony)) +
  geom_bar(aes(fill = sample_name), position = "fill") +
  scale_fill_manual(values = dittoColors())

p1 + p2 + plot_layout(ncol = 1)
```

Proportion of clusters per patient. (Do some patients tumor or normal cells more often go to particular clusters)

```{r}
#consistent cluster colors
cls_cols <- unique(sort(srt$clusters_harmony))
cols <- dittoColors()[1:length(cls_cols)]

names(cols) <- cls_cols

p1 <- srt@meta.data %>%
  filter(is_tumor_cell == T) %>%
  ggplot(aes(x = sample_name)) +
  geom_bar(aes(fill = clusters_harmony), position = "fill") +
  scale_fill_manual(values = cols) +
  labs(title = "Tumor") +
  NoLegend()
p2 <- srt@meta.data %>%
  filter(is_tumor_cell == F) %>%
  ggplot(aes(x = sample_name)) +
  geom_bar(aes(fill = clusters_harmony), position = "fill") +
  scale_fill_manual(values = cols) +
  labs(title = "Non-Tumor")

p1 + p2 + plot_layout(ncol = 1, guides = "collect")
```


### Cluster markers

Manual checking

```{r, fig.height=8, fig.width=8}

meyer <- read_excel("lung_pathways_all.xlsx",
  sheet = "meyer", skip = 3
)

markers_to_plot <- map(meyer, \(x) list(x[!is.na(x)])) %>%
    list_c() %>%
    setNames(., names(meyer))


feature_dotplot <- DotPlot(srt, features = markers_to_plot, assay = "RNA", scale = T, cluster.idents = T, group.by = "clusters_harmony", col.min = 0) + guides(x = guide_axis(angle = 90))
feature_dotplot + theme_classic() + theme(panel.spacing = unit(1, "mm"), strip.background.x = element_part_rect(side = "b"), panel.border = element_rect(fill = NA), strip.text.y = element_text(angle = 0, hjust = 0), strip.background = element_part_rect(side = "")) + coord_flip() + facet_grid(feature.groups~., 
      scales = "free_y", space = "free_y", switch = "x") +theme(legend.position = "left") #+ scale_color_gradient(na.value = "red")
```


```{r}
Idents(srt) <- "clusters_harmony"
markers_file = "results/epi_harmony_cluster_markers.txt"
overwrite = F

if (!file.exists(markers_file) | overwrite) {
  markers <- FindAllMarkers(srt, only.pos = T, verbose = T, min.diff.pct = 0.1)
  write.table(x = markers, sep = "\t", file = markers_file, col.names = T, row.names = F, quote = F)
} else {
  message("Already done markers")
  markers <- read.table(file = markers_file, header = T, sep = "\t")
}

```

Top markers across cluster dotplot

```{r, fig.width=8, fig.height=10}
features_to_plot <- markers %>%
  group_by(cluster) %>%
  slice_head(n = 4) %>%
  ungroup() %>%
  distinct(gene, .keep_all = T)

markers_pl <- split(features_to_plot$gene, features_to_plot$cluster)
# names(markers) <- paste0("c", names(markers))
feature_dotplot <- DotPlot(srt, features = markers_pl, assay = "RNA", scale = T, cluster.idents = F, group.by = "clusters_harmony", col.min = 0) + guides(x = guide_axis(angle = 90))
feature_dotplot + theme_classic() + theme(panel.spacing = unit(1, "mm"), strip.background.x = element_part_rect(side = "b"), panel.border = element_rect(fill = NA), strip.text.x = element_text(angle = 90, hjust = 0)) + coord_flip() + facet_grid(feature.groups~., 
      scales = "free_y", space = "free_y", switch = "x") +theme(legend.position = "left") #+ scale_color_gradient(na.value = "red")
```

Plot these top markers over the UMAP

```{r}
base_umap <- DimPlot(srt, reduction = "umap.harmony", group.by = c("clusters_harmony", "is_tumor_cell"), ncol = 2, label = T) %>%
  ggrastr::rasterise(dpi = 150)

gene_plots <- map(features_to_plot$gene, \(pathway) {
  umap_pl <- FeaturePlot(srt, features = pathway, max.cutoff = "q99", reduction = "umap.harmony") %>%
    ggrastr::rasterise(dpi = 150)
  
  vln_pl <- VlnPlot(srt, features = pathway, pt.size = 0, sort = "increasing") + NoLegend() +
    geom_boxplot(width = 0.15, outlier.shape = NA)
  
  final_pl <- base_umap / (umap_pl | vln_pl)
  return(final_pl)
})

pdf(file = "plots/gene_plots_umap.pdf", onefile = T, width = 10, height = 8)
gene_plots
dev.off()
```


### DE cluster 0 vs 3

```{r}
tumor_clusts <- FindMarkers(srt, ident.1 = "0", ident.2 = "3", group.by = "clusters_harmony")
```



```{r, fig.width=20, fig.height=8}
to_plot <- tumor_clusts %>%
  mutate(sign = sign(avg_log2FC)) %>%
  rownames_to_column("gene") %>%
  group_by(sign) %>%
  slice_head(n = 5) %>%
  arrange(desc(avg_log2FC)) %>%
  pull(gene)

FeaturePlot(object = srt, features = to_plot, ncol = 5, min.cutoff = "q1", max.cutoff = "q99")
```

### Check genes from the interaction analysis

```{r, fig.width = 11, fig.height=9}
to_plot <- c("APOE", "ALCAM", "HLA-A", "HLA-B", "HLA-C", "HLA-G", "HLA-F", "HLA-DRA", "SOX2", "TP63")

FeaturePlot(object = srt, features = to_plot, ncol = 3, min.cutoff = "q1", max.cutoff = "q99", order = T)
```


```{r, fig.width = 11, fig.height=9}
VlnPlot(srt, features = to_plot, sort = "increasing", pt.size = 0)
```


## Pathway analysis

### Assemble pathway lists

Assemble pathways to query

```{r}
kraknow <- read_excel("lung_pathways_all.xlsx",
  sheet = "kraknow_nature_2020", skip = 3
)

meyer <- read_excel("lung_pathways_all.xlsx",
  sheet = "meyer", skip = 3
)

stem <- read_excel("lung_pathways_all.xlsx",
  sheet = "stem_cell"
)

path_list <- list(kraknow, meyer, stem)

custom_paths <- map(path_list, \(l) {
  map(l, \(x) list(x[!is.na(x)])) %>%
    list_c() %>%
    setNames(., names(l))
}) %>%
  list_c()
```


Various pathways we used from the other lung egfr project

```{r}
egfr_pathways <- read_excel("egfr_pathways.xlsx") %>%
  janitor::clean_names()
histo_pathways <- read_excel("egfr_pathways.xlsx", sheet = "lung_histo", skip = 1)
custom_paths2 <- map(list(histo_pathways), \(l) {
  map(l, \(x) list(x[!is.na(x)])) %>%
    list_c() %>%
    setNames(., names(l))
}) %>%
  list_c()
all_gene_sets <- msigdbr(species = "Homo sapiens")
pathways <- map(egfr_pathways$pathway, \(pathway) {
  all_gene_sets[all_gene_sets$gs_name == pathway, ]$gene_symbol
})
names(pathways) <- egfr_pathways$pathway
pathways_final <- c(pathways, custom_paths2, custom_paths)

# Add custom entries to the table
add_paths <- tibble::tribble(
                                         ~genesets_related_to,    ~category,           ~pathway, ~description,
                      "LUAD differentiation", "LUAD", "LUAD_GIRARD",  NA,
                      "LUSC differentiation", "LUSC", "LUSC_GIRARD",  NA,
                      )
egfr_pathways <- list_rbind(list(egfr_pathways, add_paths))
```


Check that we have the genes represented

```{r}
walk2(custom_paths, names(custom_paths), \(x, y) {
  missing <- x[which(!x %in% rownames(srt))]

  prop_missing <- signif(length(missing) / length(x), 2)

  if (prop_missing > 0) {
    print(glue("Missing {length(missing)} of {length(x)} genes from pathway {y}:"))
    print(missing)
    cat("\n")
  }
})
```


### U-Cell Scoring

Perform scoring

```{r}
overwrite <- F
recompute_ranks <- F
if (!file.exists("results/epithelial_cell_scores.txt.gz") | overwrite) {
  count_mat <- as(srt[["RNA"]]$data, Class = "dgCMatrix")

  # Compute ranks if not already done
  if (!file.exists("ucell_gene_ranks.rds") | recompute_ranks) {
    set.seed(123)
    ranks <- StoreRankings_UCell(count_mat, ncores = 8)
    saveRDS(ranks, "ucell_gene_ranks.rds")
  } else {
    ranks <- readRDS("ucell_gene_ranks.rds")
  }

  scores <- ScoreSignatures_UCell(
    features = pathways_final,
    name = NULL,
    ncores = 8,
    precalc.ranks = ranks
  )
  scores %>%
    as.data.frame() %>%
    rownames_to_column("cell_id") %>%
    write.table(file = gzfile("results/epithelial_cell_scores.txt.gz"), quote = F, sep = "\t", row.names = T, col.names = T)
} else {
  message("Scores already computed. Loading...")
  scores <- read.table(file = "results/epithelial_cell_scores.txt.gz", header = T, sep = "\t")
}

scores <- janitor::clean_names(scores)

names(pathways_final) <- janitor::make_clean_names(names(pathways_final))

egfr_pathways$pathway <- janitor::make_clean_names(egfr_pathways$pathway)

srt <- AddMetaData(srt, scores)
```


## Exploratory Analysis

```{r}
egfr_exp_df <- FetchData(srt, vars = c("sample_name", "is_tumor_cell", names(pathways_final)), layer = "data")
```


Visualize over tumor and normal cells

```{r}
# to_plot <- c("EGFR", "CHGA", "SYP", "TP63", "NAPSA", "NKX2-1", "DUSP6", "HES1", "SOX2", "EZH2", "CDK7", "CDK12", "KDM5A", "BRD4", "SASP")
# to_plot <- "AFF3"
to_plot <- names(pathways_final)
gene_df <- egfr_exp_df %>%
  rownames_to_column("cell_id")

gene_plots <- map(to_plot[to_plot %in% colnames(gene_df)], .f = function(gene) {
  
  gs_cat1 <- egfr_pathways[egfr_pathways$pathway == gene,]$genesets_related_to
  gs_cat2 <- egfr_pathways[egfr_pathways$pathway == gene,]$category
  
  
  sample_plots <- gene_df %>%
    ggplot(aes(x = fct_reorder(sample_name, .data[[gene]], mean), y = .data[[gene]])) +
      geom_violin(position = position_dodge(width = 0.85), scale = "width", aes(color = is_tumor_cell)) +
    geom_pointrange(aes(color = is_tumor_cell), position = position_dodge(width = 0.85),
      stat = "summary",
      fun.min = function(y) {
        quantile(y, 0.25)
      },
      fun.max = function(y) {
        quantile(y, 0.75)
      },
      fun = median
    ) +
      guides(x = guide_axis(angle = 90)) +
    labs(x = "Sample ID", y = glue("{gene}\nExpression Level")) +
    theme(legend.position = "none")
  
  summarized_plots <- gene_df %>%
    group_by(sample_name, is_tumor_cell) %>%
    summarize(mean_exp = mean(.data[[gene]])) %>%
    ggplot(aes(x = is_tumor_cell, y = mean_exp, color = is_tumor_cell)) +
    geom_boxplot(outlier.shape = NA) +
    geom_quasirandom(size = 0.5) +
    labs(x = "Cell Type", y = glue("{gene}\nMean Per Sample Expression Level"), color = "Timepoint") +
    guides(x = guide_axis(angle = 90)) +
    theme(legend.position = "none")
  
  pcomb <- sample_plots + summarized_plots + plot_layout(guides = "collect", widths = c(1, 0.1)) + 
    plot_annotation(title = glue("Geneset Category: {gs_cat1}"), subtitle = glue("Subcategory: {gs_cat2}"))
  return(pcomb)
})
names(gene_plots) <- names(pathways_final)
pdf(file = "plots/pathway_plots.pdf", onefile = T, width = 11, height = 4)
gene_plots
dev.off()
```

Plot all the pathways over top of the UMAP

```{r, fig.width = 10, fig.height=8}
base_umap <- DimPlot(srt, reduction = "umap.harmony", group.by = c("clusters_harmony", "is_tumor_cell"), ncol = 2, label = T) %>%
  ggrastr::rasterise(dpi = 150)

pathway_plots <- map(colnames(scores)[2:ncol(scores)], \(pathway) {
  umap_pl <- FeaturePlot(srt, features = pathway, max.cutoff = "q99", reduction = "umap.harmony") %>%
    ggrastr::rasterise(dpi = 150)
  
  vln_pl <- VlnPlot(srt, features = pathway, pt.size = 0, sort = "increasing") + NoLegend() +
    geom_boxplot(width = 0.15, outlier.shape = NA)
  
  final_pl <- base_umap / (umap_pl | vln_pl)
  return(final_pl)
})

pdf(file = "plots/pathway_plots_umap.pdf", onefile = T, width = 10, height = 8)
pathway_plots
dev.off()
```



Use the per sample mean of these pathway scores to cluster

```{r, fig.width=3}
library(SingleCellExperiment)
library(scuttle)
# devtools::load_all()

counts <- as.matrix(egfr_exp_df[, egfr_pathways$pathway])

sce <- SingleCellExperiment(list(counts = t(counts)), colData = srt_epi@meta.data[, !colnames(srt_epi@meta.data) %in% names(pathways)])

sce$grouping_label <- paste(sce$sample_name, sce$is_tumor_cell, sep = "_")

sce_bulk <- aggregateAcrossCells(sce, ids = sce$grouping_label, statistics = "mean")
# Merge the mechanism of resistance column
# Sanity check
# dittoBoxPlot(sce_bulk, group.by = "time_point", var = "HALLMARK_MYC_TARGETS_V1")
```



```{r, fig.width=15, fig.height=14}
library(ComplexHeatmap)
geneset_anno_df <- egfr_pathways %>%
  column_to_rownames("pathway") %>%
  select(genesets_related_to)
# sce_bulk$time_point <- factor(sce_bulk$time_point, levels = c("Pre", "On", "Progression"))
# col_split <- sce_bulk$time_point[order(sce_bulk$time_point)]
ht <- dittoHeatmap(sce_bulk, scaled.to.max = F, annot.by = c("sample_name", "is_tumor_cell"), cluster_cols = T, show_colnames = T, annotation_row = geneset_anno_df, complex = T, row_split = geneset_anno_df$genesets_related_to, cluster_row_slices = T, cluster_column_slices = F, row_title_rot = 0, name = "Pathway Enrichment", scale = "row", row_names_max_width = unit(100, "cm"))
draw(ht, heatmap_legend_side = "right", annotation_legend_side = "right", show_heatmap_legend = T, show_annotation_legend = T)
```


```{r, fig.width=15, fig.height=14}
ht <- dittoHeatmap(sce_bulk[,sce_bulk$is_tumor_cell == T], scaled.to.max = F, annot.by = c("sample_name", "is_tumor_cell"), cluster_cols = T, show_colnames = T, annotation_row = geneset_anno_df, complex = T, row_split = geneset_anno_df$genesets_related_to, cluster_row_slices = T, cluster_column_slices = F, row_title_rot = 0, name = "Pathway Enrichment", scale = "row", row_names_max_width = unit(100, "cm"))
draw(ht, heatmap_legend_side = "right", annotation_legend_side = "right", show_heatmap_legend = T, show_annotation_legend = T)
```


### Repeat per cluster

Use the per sample mean of these pathway scores to cluster

```{r, fig.width=3}

counts <- as.matrix(egfr_exp_df[, egfr_pathways$pathway])

sce_tumor <- SingleCellExperiment(list(counts = t(counts)), colData = srt@meta.data[, !colnames(srt@meta.data) %in% names(pathways_final)])
sce_tumor <- sce_tumor[,sce_tumor$is_tumor_cell]
sce_bulk <- aggregateAcrossCells(sce_tumor, ids = sce_tumor$clusters_harmony, statistics = "mean")
# Merge the mechanism of resistance column
# Sanity check
# dittoBoxPlot(sce_bulk, group.by = "time_point", var = "HALLMARK_MYC_TARGETS_V1")
```



```{r, fig.width=15, fig.height=14}
library(ComplexHeatmap)
geneset_anno_df <- egfr_pathways %>%
  column_to_rownames("pathway") %>%
  select(genesets_related_to)
# sce_bulk$time_point <- factor(sce_bulk$time_point, levels = c("Pre", "On", "Progression"))
# col_split <- sce_bulk$time_point[order(sce_bulk$time_point)]
colnames(sce_bulk) <- paste0(colnames(sce_bulk), "\n(n=", sce_bulk$ncells, ")")

ht <- dittoHeatmap(sce_bulk, scaled.to.max = F, cluster_cols = T, show_colnames = T, annotation_row = geneset_anno_df, complex = T, row_split = geneset_anno_df$genesets_related_to, cluster_row_slices = T, cluster_column_slices = F, row_title_rot = 0, name = "Pathway Enrichment", scale = "row", row_names_max_width = unit(100, "cm"))
draw(ht, heatmap_legend_side = "right", annotation_legend_side = "right", show_heatmap_legend = T, show_annotation_legend = T)
```


Remove primarily normal cell clusters

```{r, fig.width=15, fig.height=14}
ht <- dittoHeatmap(sce_bulk[,sce_bulk$clusters_harmony %in% c(0, 3, 4, 5, 6, 8, 9, 15)], scaled.to.max = F, cluster_cols = T, show_colnames = T, annotation_row = geneset_anno_df, complex = T, row_split = geneset_anno_df$genesets_related_to, cluster_row_slices = T, cluster_column_slices = F, row_title_rot = 0, name = "Pathway Enrichment", scale = "row", row_names_max_width = unit(100, "cm"))
draw(ht, heatmap_legend_side = "right", annotation_legend_side = "right", show_heatmap_legend = T, show_annotation_legend = T)
```


Does SMAD expression correlate with stemness?

```{r}
df <- FetchData(srt, vars = c("sample_name", "is_tumor_cell", "clusters_harmony", names(pathways_final), grep("SMAD", rownames(srt), value = T)), layer = "data")

feats <- c(names(pathways_final), grep("SMAD", rownames(srt), value = T))


sce <- SingleCellExperiment(list(counts = t(df[,feats])), colData = srt@meta.data[, !colnames(srt@meta.data) %in% names(pathways_final)])

sce_bulk <- aggregateAcrossCells(sce, ids = sce_tumor$clusters_harmony, statistics = "mean")

```

Which SMADs are highly expressed in patient tumor cells and clusters

```{r, fig.width=14, fig.height=6}
smad_long <- df %>%
  pivot_longer(cols = grep("SMAD", rownames(srt), value = T), names_to = "SMAD", values_to = "Expression")

smad_long %>%
  ggplot(aes(x = sample_name, y = Expression)) +
    geom_pointrange(aes(color = is_tumor_cell), position = position_dodge(width = 0.85),
      stat = "summary",
      fun.min = function(y) {
        quantile(y, 0.25)
      },
      fun.max = function(y) {
        quantile(y, 0.75)
      },
      fun = median
    ) +
  facet_wrap(~SMAD, ncol = 4) +
  guides(x = guide_axis(angle = 90))
```

```{r}
smad_long %>%
  ggplot(aes(x = sample_name, y = Expression)) +
    geom_pointrange(aes(color = is_tumor_cell), position = position_dodge(width = 0.85),
      stat = "summary",
      fun.min = function(y) {
        quantile(y, 0.25)
      },
      fun.max = function(y) {
        quantile(y, 0.75)
      },
      fun = median
    ) +
  facet_wrap(~SMAD, ncol = 4) +
  guides(x = guide_axis(angle = 90))
```


```{r, fig.width=14, fig.height=6}
devtools::load_all("~/work/repos/meso")
library(RColorBrewer)

markers_to_plot <- grep("SMAD", rownames(srt), value = T)


dittoDotPlot(srt, vars = markers_to_plot, split.by = "clusters_harmony", group.by = "is_tumor_cell") +
  scale_color_gradient(limits = c(0, 1), oob = scales::squish, low = "lightgrey", high = "blue")
```


```{r}
VlnPlot(srt, features = c("SMAD2"), group.by = "clusters_harmony", split.by = "is_tumor_cell")
```


```{r, fig.width=14, fig.height=6}
feature_dotplot <- DotPlot_fixed(srt[,srt$is_tumor_cell == T], features = markers_to_plot, assay = "RNA", scale = T, cluster.idents = T, group.by = "clusters_harmony", col.min = 0) + guides(x = guide_axis(angle = 90))
feature_dotplot + theme_classic() + theme(panel.spacing = unit(1, "mm"), strip.background.x = element_part_rect(side = "b"), panel.border = element_rect(fill = NA), strip.text.y = element_text(angle = 0, hjust = 0), strip.background = element_part_rect(side = "")) + coord_flip() #+ scale_color_gradient(na.value = "red")


```

```{r}
feature_dotplot <- DotPlot(srt, features = markers_to_plot, assay = "RNA", scale = T, cluster.idents = F, split.by = "is_tumor_cell", group.by = "sample_name", col.min = 0) + guides(x = guide_axis(angle = 90))
feature_dotplot + theme_classic() + theme(panel.spacing = unit(1, "mm"), strip.background.x = element_part_rect(side = "b"), panel.border = element_rect(fill = NA), strip.text.y = element_text(angle = 0, hjust = 0), strip.background = element_part_rect(side = "")) + coord_flip() #+ scale_color_gradient(na.value = "red")
```


## Save Out

Dump out pathway scores, tumor cell calls, clusters,

```{r}
srt@meta.data %>%
  select(cell_id, is_tumor_cell, clusters_harmony) %>%
  write.table("results/epithelial_cell_clusters.txt", col.names = T, row.names = F, quote = F, sep = "\t")
```



```{r}
library(corrplot)
library(Hmisc)

flattenCorrMatrix <- function(cormat, pmat) {
  ut <- upper.tri(cormat)
  data.frame(
    row = rownames(cormat)[row(cormat)[ut]],
    column = rownames(cormat)[col(cormat)[ut]],
    cor  =(cormat)[ut],
    p = pmat[ut]
    )
}

res2<-rcorr(as.matrix(df[,c(names(pathways_final), grep("SMAD", rownames(srt), value = T))]))

flat_cor <- flattenCorrMatrix(res2$r, res2$P) %>%
  filter(grepl("SMAD", row) | grepl("SMAD", column)) %>%
  mutate(p.adj = p.adjust(p)) %>%
  arrange(p.adj, desc(cor))

```


```{r}
head(df)

map(grep("SMAD", rownames(srt), value = T), \(g) {
  df %>%
    ggplot(aes(x = .data[[g]], y = hallmark_myc_targets_v1)) +
      geom_point()
})



```




# Old stuff

Reperform analysis

```{r}
srt <- srt %>%
  NormalizeData() %>%
  FindVariableFeatures() %>%
  ScaleData() %>%
  RunPCA() %>%
  RunHarmony(group.by.vars = "sample_name") %>%
  FindNeighbors(reduction = "harmony", dims = 1:30) %>%
  RunUMAP(reduction = "harmony", dims = 1:30) %>%
  FindClusters(resolution = 0.8)

srt <- JoinLayers(srt)
```


```{r, fig.width = 10, fig.height = 4}
DimPlot(srt, group.by = c("is_tumor_cell", "seurat_clusters"))
```


Split Layers approach

```{r}
DefaultAssay(srt) <- "RNA"
srt[["RNA"]] <- split(srt[["RNA"]], f = srt$sample_name)

srt <- NormalizeData(srt)
srt <- FindVariableFeatures(srt)
srt <- ScaleData(srt)
srt <- RunPCA(srt)

srt <- FindNeighbors(srt, dims = 1:30, reduction = "pca")
srt <- FindClusters(srt, resolution = 0.8, cluster.name = "unintegrated_clusters")

srt <- RunUMAP(srt, dims = 1:30, reduction = "pca", reduction.name = "umap.unintegrated")

DimPlot(srt, reduction = "umap.unintegrated", group.by = c("sample_name", "is_tumor_cell"))

```


```{r}
srt <- IntegrateLayers(
  object = srt, method = CCAIntegration,
  orig.reduction = "pca", new.reduction = "integrated.cca",
  verbose = T
)

srt <- FindNeighbors(srt, reduction = "integrated.cca", dims = 1:30)
srt <- FindClusters(srt, resolution = 0.8, cluster.name = "cca_clusters")
srt <- RunUMAP(srt, reduction = "integrated.cca", dims = 1:30, reduction.name = "umap.cca")
DimPlot(srt, reduction = "umap.cca", group.by = c("sample_name", "is_tumor_cell"))

```


```{r}
srt <- NormalizeData(srt)
srt <- FindVariableFeatures(srt)
srt <- ScaleData(srt)
srt <- RunPCA(srt)

srt <- IntegrateLayers(
  object = srt, method = RPCAIntegration,
  orig.reduction = "pca", new.reduction = "integrated.rpca",
  verbose = T, k.anchor = 5, k.filter = 100, k.weight = 50
)

srt <- FindNeighbors(srt, reduction = "integrated.rpca", dims = 1:30)
srt <- FindClusters(srt, resolution = 0.8, cluster.name = "prca_clusters")
srt <- RunUMAP(srt, reduction = "integrated.rpca", dims = 1:30, reduction.name = "umap.rpca")
DimPlot(srt, reduction = "umap.rpca", group.by = c("sample_name", "is_tumor_cell"))
```



SCTransform out of curiousity

```{r}
srt <- SCTransform(srt, vst.flavor = "v2")

srt <- srt %>%
  RunPCA(npcs = 30, verbose = FALSE) %>%
  RunUMAP(reduction = "pca", dims = 1:30, verbose = FALSE) %>%
  FindNeighbors(reduction = "pca", dims = 1:30, verbose = FALSE) %>%
  FindClusters(resolution = 0.7, verbose = FALSE)


DimPlot(srt, group.by = c("is_tumor_cell", "seurat_clusters", "sample_name"), ncol = 2)

```

SCTransform integration

```{r}
DefaultAssay(srt) <- "RNA"
srt[["RNA"]] <- split(srt[["RNA"]], f = srt$sample_name)

srt <- SCTransform(srt, vst.flavor = "v2")

srt <- srt %>%
  RunPCA(npcs = 30, verbose = FALSE) %>%
  RunUMAP(reduction = "pca", dims = 1:30, verbose = FALSE) %>%
  FindNeighbors(reduction = "pca", dims = 1:30, verbose = FALSE) %>%
  FindClusters(resolution = 0.7, verbose = FALSE)


DimPlot(srt, group.by = c("is_tumor_cell", "seurat_clusters", "sample_name"), ncol = 2)

```





